services:
  # FRONTEND
  app:
    build:
      context: ./todo-frontend/ # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
      - /usr/src/app/node_modules
    ports:
      - 3210:5173
    container_name: todo-frontend-dev # This will name the container hello-front-dev
    depends_on:
      server:
        condition: service_started

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy-dev
    depends_on:
      - app # wait for the frontend container to be started

  # BACKEND
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    container_name: mongo-db-dev
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    command: ["redis-server", "--appendonly", "yes"]
    container_name: redis-dev
    volumes:
      - redis_data:/data

  server:
    build:
      context: ./todo-backend/
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-backend:/usr/src/app
      - /usr/src/app/node_modules # To avoid overriding node_modules
    ports:
      - 3000:3000 # Adjust if needed for your backend app
    container_name: todo-backend-dev
    environment:
      - MONGO_URL=mongodb://root:example@mongo:27017/the_database?authSource=admin
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  debug-helper:
    image: busybox

volumes:
  mongo_data:
  redis_data:
